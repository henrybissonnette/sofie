// Generated by CoffeeScript 1.6.3
(function() {
  var BoxerModule, app, boxer, fs, getCommandModule, help, mustache, nopt, path, print, version,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require('fs');

  path = require('path');

  nopt = require('nopt');

  mustache = require('mustache');

  app = function() {
    var proc;
    proc = process.argv[0] === 'node' ? process.argv[1] : process.argv[0];
    return path.basename(proc);
  };

  version = function() {
    return (require('../package.json')).version;
  };

  print = function(text) {
    var baseTemplate, out;
    baseTemplate = "{{placeholder}}\n    {{appUpper}}\n\n    {{text}}\n\n    {{app}} v{{version}}\n";
    out = mustache.render(baseTemplate, {
      text: text,
      app: app(),
      appUpper: app().toUpperCase(),
      version: version()
    });
    return console.log(out);
  };

  help = function(commands, location) {
    var context, name, template;
    context = {
      summaries: (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = commands.length; _i < _len; _i++) {
          name = commands[_i];
          _results.push(getCommandModule(name, location).summary());
        }
        return _results;
      })()
    };
    template = "{{#summaries}}\n{{.}}\n{{/summaries}}";
    return print(mustache.render(template, context));
  };

  BoxerModule = (function() {
    function BoxerModule(name, _arg) {
      this.name = name;
      this.description = _arg.description, this.options = _arg.options, this.action = _arg.action, this.signature = _arg.signature;
    }

    BoxerModule.prototype.run = function() {
      var parameters;
      parameters = nopt(this.optionsNopt(), this.aliasesNopt(), process.argv, 2);
      return this.action(parameters);
    };

    BoxerModule.prototype.summary = function() {
      return "" + this.name + "   " + this.description + "\n";
    };

    BoxerModule.prototype.printDetails = function() {
      var context, template;
      template = "    {{description}}\n\n    OPTIONS\n\n{{#options}}\n    {{name}}    {{description}}\n{{/options}}\n";
      context = {
        app: app().toUpperCase(),
        command: this.name.toUpperCase(),
        description: this.description,
        options: this.options
      };
      return print(mustache.render(template, context));
    };

    BoxerModule.prototype.optionsNopt = function() {
      var o, option, _i, _len, _ref;
      o = {};
      _ref = this.options;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        o[option.name] = option.type;
      }
      return o;
    };

    BoxerModule.prototype.aliasesNopt = function() {
      var a, option, _i, _len, _ref;
      a = {};
      _ref = this.options;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        a[option.alias] = "--" + option.name;
      }
      return a;
    };

    return BoxerModule;

  })();

  getCommandModule = function(name, location) {
    var config;
    config = require(path.join.apply(path, [__dirname].concat(__slice.call(location.split('/')), [name])));
    return new BoxerModule(name, config);
  };

  module.exports = boxer = function(_arg) {
    var command, commandNames, location, module;
    commandNames = _arg.commands, location = _arg.location;
    if (location == null) {
      location = './';
    }
    command = nopt({}, {}, process.argv).argv.remain.shift();
    if (!(command && __indexOf.call(commandNames, command) >= 0)) {
      help(commandNames, location);
      process.exit(0);
    }
    module = getCommandModule(command, location);
    return module.run();
  };

}).call(this);
